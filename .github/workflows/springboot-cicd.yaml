name: Build and Deploy Workflow

on:
  workflow_dispatch:
    inputs:
      image_tag:
        description: "Docker Image Tag to Deploy"
        required: true
        type: string

jobs:
  BuildArtifact:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        id: checkout
        uses: actions/checkout@v4

      - name: Set Up Java
        id: setup-java
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Maven Dependencies
        id: cache-maven
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: maven-${{ runner.os }}-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            maven-${{ runner.os }}-

      - name: Build Artifact
        id: build
        run: |
          mvn clean package --file pom.xml
          mkdir -p artifact && cp target/*.jar artifact/

      - name: Upload Artifact
        id: upload
        uses: actions/upload-artifact@v4
        with:
          name: package
          path: artifact/
          retention-days: 30

  DockerImageBuild:
    runs-on: ubuntu-latest
    needs: BuildArtifact
    env:
      IMAGE_TAG: ${{ inputs.image_tag }}
    steps:
      - name: Checkout Repository
        id: checkout
        uses: actions/checkout@v4

      - name: Download Maven Artifact
        id: downloadArtifact
        uses: actions/download-artifact@v4
        with:
          name: package
          path: artifact/

      - name: Build Docker Image
        id: buildDockerImage
        run: |
          docker build -t springboothello:${{ env.IMAGE_TAG }} .

      - name: Install Trivy
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin v0.18.3

      - name: Scan Docker Image with Trivy
        id: trivyScan
        continue-on-error: false
        run: |
          trivy -d image springboothello:${{ env.IMAGE_TAG }}

      - name: Docker image tagging
        id: dockerImageTag
        run: |
          docker tag springboothello:${{ env.IMAGE_TAG }} naresh240/springboothello:${{ env.IMAGE_TAG }}
    
      - name: Docker image push
        id: dockerImagePush
        run: |
          docker login -u naresh240 -p ${{ secrets.DOCKER_PASSWORD }}
          docker push naresh240/springboothello:${{ env.IMAGE_TAG }}

      - name: Save Image Tag as File
        run: echo "${{ env.IMAGE_TAG }}" > image-tag.txt

      - name: Upload Image Tag as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: image-tag
          path: image-tag.txt

  
  DeployToEKS:
    runs-on: ubuntu-latest
    needs: DockerImageBuild
    env:
      AWS_REGION: us-east-1
      EKS_CLUSTER_NAME: eksdemo

    steps:
      - name: Checkout Repository
        id: checkout
        uses: actions/checkout@v4

      - name: Download Image Tag
        uses: actions/download-artifact@v4
        with:
          name: image-tag
          path: ./

      - name: Read Image Tag
        run: echo "IMAGE_TAG=$(cat image-tag.txt)" >> $GITHUB_ENV

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Authenticate with Amazon EKS
        run: |
          aws eks update-kubeconfig --name ${{ env.EKS_CLUSTER_NAME }} --region ${{ env.AWS_REGION }}

      - name: Deploy to EKS
        run: |
          sed -i 's|image: .*|image: naresh240/springboothello:'"${{ env.IMAGE_TAG }}"'|' deploy/deployment.yaml
          kubectl apply -f deploy/deployment.yaml
          kubectl apply -f deploy/service.yaml

      - name: List pods and services
        run: |
          sleep 10
          kubectl get pods
          kubectl get services


